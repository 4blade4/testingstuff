local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local AllowedNames = {
    "Hitbox",
    "BodyHitbox",
    "RightArm",
    "Head"
}

local ExclusionModelNames = {
    "ItemDrop",
    "FireflyLocal"
}

local ExclusionFolderNames = {
    "PassiveNPCs"
}

local ExcludedObjects = {} -- Will store models/folders to ignore

-- Utility functions
local function modifyPart(part)
    if part and part:IsA("BasePart") then
        part.Size = Vector3.new(200, 200, 200)
        part.CanCollide = false
        part.Anchored = true
        part.Transparency = 1
    end
end

local function isPlayerDescendant(instance)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and instance:IsDescendantOf(player.Character) then
            return true
        end
    end
    return false
end

local function isPlayerModel(model)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character == model then
            return true
        end
    end
    return false
end

local function isInExcluded(instance)
    for _, excluded in pairs(ExcludedObjects) do
        if instance:IsDescendantOf(excluded) then
            return true
        end
    end
    return false
end

local function updateExclusionCache()
    ExcludedObjects = {} -- reset
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and table.find(ExclusionModelNames, obj.Name) then
            table.insert(ExcludedObjects, obj)
        elseif obj:IsA("Folder") and table.find(ExclusionFolderNames, obj.Name) then
            table.insert(ExcludedObjects, obj)
        end
    end
end

-- Core logic
local function handleModel(model)
    if not model:IsA("Model") then return end
    if isPlayerDescendant(model) or isPlayerModel(model) or isInExcluded(model) then return end

    for i = 1, 3 do
        local part = model:FindFirstChild(AllowedNames[i])
        if part and part:IsA("BasePart") then
            modifyPart(part)
            return
        end
    end

    local head = model:FindFirstChild("Head")
    if head and head:IsA("BasePart") then
        modifyPart(head)
    end
end

-- Initial setup
updateExclusionCache()

for _, instance in ipairs(Workspace:GetDescendants()) do
    if instance:IsA("Model") then
        handleModel(instance)
    end
end

-- Watch for new things
Workspace.DescendantAdded:Connect(function(obj)
    task.wait(0.05)

    -- If something new is a model/folder named ItemDrop or PassiveNPCs, update the cache
    if (obj:IsA("Model") and table.find(ExclusionModelNames, obj.Name)) or
       (obj:IsA("Folder") and table.find(ExclusionFolderNames, obj.Name)) then
        table.insert(ExcludedObjects, obj)
        return
    end

    if isInExcluded(obj) or isPlayerDescendant(obj) then return end

    if obj:IsA("Model") then
        handleModel(obj)
    elseif obj:IsA("BasePart") and obj.Parent and obj.Parent:IsA("Model") then
        if not isInExcluded(obj.Parent) and not isPlayerDescendant(obj.Parent) then
            handleModel(obj.Parent)
        end
    end
end)
