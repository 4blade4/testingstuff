local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

-- Function to modify a part
local function modifyPart(part)
    if part and part:IsA("BasePart") then
        part.Size = Vector3.new(200, 200, 200)
        part.CanCollide = false
        part.Anchored = true
        part.Transparency = 1
    end
end

-- Check if the instance is part of a player's character
local function isPlayerDescendant(instance)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and instance:IsDescendantOf(player.Character) then
            return true
        end
    end
    return false
end

-- Check if the instance is inside a specific folder or model
local function isInIgnoredFolder(instance)
    local ignoreFolders = {
        Workspace:FindFirstChild("PassiveNPCs"),
        Workspace:FindFirstChild("LocalItemDrop"),
    }

    for _, folder in pairs(ignoreFolders) do
        if folder and instance:IsDescendantOf(folder) then
            return true
        end
    end

    return false
end

-- Should we modify this object?
local function shouldModify(obj)
    return (obj.Name == "Hitbox" or obj.Name == "Torso")
        and obj:IsA("BasePart")
        and not isPlayerDescendant(obj)
        and not isInIgnoredFolder(obj)
end

-- Modify existing parts
for _, obj in pairs(Workspace:GetDescendants()) do
    if shouldModify(obj) then
        modifyPart(obj)
    end
end

-- Watch for new parts being added
Workspace.DescendantAdded:Connect(function(obj)
    -- Give time for the object to be fully parented into the workspace
    task.wait(0.1)
    if shouldModify(obj) then
        modifyPart(obj)
    end
end)
